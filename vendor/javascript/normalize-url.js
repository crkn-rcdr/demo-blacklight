const e="text/plain";const t="us-ascii";const testParameter=(e,t)=>t.some((t=>t instanceof RegExp?t.test(e):t===e));const r=new Set(["https:","http:","file:"]);const hasCustomProtocol=e=>{try{const{protocol:t}=new URL(e);return t.endsWith(":")&&!r.has(t)}catch{return false}};const normalizeDataURL=(r,{stripHash:a})=>{const o=/^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(r);if(!o)throw new Error(`Invalid URL: ${r}`);let{type:s,data:n,hash:c}=o.groups;const i=s.split(";");c=a?"":c;let h=false;if("base64"===i[i.length-1]){i.pop();h=true}const l=i.shift()?.toLowerCase()??"";const p=i.map((e=>{let[r,a=""]=e.split("=").map((e=>e.trim()));if("charset"===r){a=a.toLowerCase();if(a===t)return""}return`${r}${a?`=${a}`:""}`})).filter(Boolean);const m=[...p];h&&m.push("base64");(m.length>0||l&&l!==e)&&m.unshift(l);return`data:${m.join(";")},${h?n.trim():n}${c?`#${c}`:""}`};function normalizeUrl(e,t){t={defaultProtocol:"http",normalizeProtocol:true,forceHttp:false,forceHttps:false,stripAuthentication:true,stripHash:false,stripTextFragment:true,stripWWW:true,removeQueryParameters:[/^utm_\w+/i],removeTrailingSlash:true,removeSingleSlash:true,removeDirectoryIndex:false,removeExplicitPort:false,sortQueryParameters:true,...t};"string"!==typeof t.defaultProtocol||t.defaultProtocol.endsWith(":")||(t.defaultProtocol=`${t.defaultProtocol}:`);e=e.trim();if(/^data:/i.test(e))return normalizeDataURL(e,t);if(hasCustomProtocol(e))return e;const r=e.startsWith("//");const a=!r&&/^\.*\//.test(e);a||(e=e.replace(/^(?!(?:\w+:)?\/\/)|^\/\//,t.defaultProtocol));const o=new URL(e);if(t.forceHttp&&t.forceHttps)throw new Error("The `forceHttp` and `forceHttps` options cannot be used together");t.forceHttp&&"https:"===o.protocol&&(o.protocol="http:");t.forceHttps&&"http:"===o.protocol&&(o.protocol="https:");if(t.stripAuthentication){o.username="";o.password=""}t.stripHash?o.hash="":t.stripTextFragment&&(o.hash=o.hash.replace(/#?:~:text.*?$/i,""));if(o.pathname){const e=/\b[a-z][a-z\d+\-.]{1,50}:\/\//g;let t=0;let r="";for(;;){const a=e.exec(o.pathname);if(!a)break;const s=a[0];const n=a.index;const c=o.pathname.slice(t,n);r+=c.replace(/\/{2,}/g,"/");r+=s;t=n+s.length}const a=o.pathname.slice(t,o.pathname.length);r+=a.replace(/\/{2,}/g,"/");o.pathname=r}if(o.pathname)try{o.pathname=decodeURI(o.pathname)}catch{}true===t.removeDirectoryIndex&&(t.removeDirectoryIndex=[/^index\.[a-z]+$/]);if(Array.isArray(t.removeDirectoryIndex)&&t.removeDirectoryIndex.length>0){let e=o.pathname.split("/");const r=e[e.length-1];if(testParameter(r,t.removeDirectoryIndex)){e=e.slice(0,-1);o.pathname=e.slice(1).join("/")+"/"}}if(o.hostname){o.hostname=o.hostname.replace(/\.$/,"");t.stripWWW&&/^www\.(?!www\.)[a-z\-\d]{1,63}\.[a-z.\-\d]{2,63}$/.test(o.hostname)&&(o.hostname=o.hostname.replace(/^www\./,""))}if(Array.isArray(t.removeQueryParameters))for(const e of[...o.searchParams.keys()])testParameter(e,t.removeQueryParameters)&&o.searchParams.delete(e);Array.isArray(t.keepQueryParameters)||true!==t.removeQueryParameters||(o.search="");if(Array.isArray(t.keepQueryParameters)&&t.keepQueryParameters.length>0)for(const e of[...o.searchParams.keys()])testParameter(e,t.keepQueryParameters)||o.searchParams.delete(e);if(t.sortQueryParameters){o.searchParams.sort();try{o.search=decodeURIComponent(o.search)}catch{}}t.removeTrailingSlash&&(o.pathname=o.pathname.replace(/\/$/,""));t.removeExplicitPort&&o.port&&(o.port="");const s=e;e=o.toString();t.removeSingleSlash||"/"!==o.pathname||s.endsWith("/")||""!==o.hash||(e=e.replace(/\/$/,""));(t.removeTrailingSlash||"/"===o.pathname)&&""===o.hash&&t.removeSingleSlash&&(e=e.replace(/\/$/,""));r&&!t.normalizeProtocol&&(e=e.replace(/^http:\/\//,"//"));t.stripProtocol&&(e=e.replace(/^(?:https?:)?\/\//,""));return e}export{normalizeUrl as default};

