const e="undefined"!==typeof global?global:self;const t=e.MutationObserver||e.WebKitMutationObserver;function makeRequestCallFromTimer(e){return function requestCall(){const t=setTimeout(handleTimer,0);const s=setInterval(handleTimer,50);function handleTimer(){clearTimeout(t);clearInterval(s);e()}}}function makeRequestCallFromMutationObserver(e){let s=1;const r=new t(e);const n=document.createTextNode("");r.observe(n,{characterData:true});return function requestCall(){s=-s;n.data=s}}const s="function"===typeof t?makeRequestCallFromMutationObserver:makeRequestCallFromTimer;class AsapQueue{enqueueTask(e){const{queue:t,requestFlush:s}=this;if(!t.length){s();this.flushing=true}t[t.length]=e}constructor(){this.queue=[];this.pendingErrors=[];this.flushing=false;this.index=0;this.capacity=1024;this.flush=()=>{const{queue:e}=this;while(this.index<e.length){const t=this.index;this.index++;e[t].call();if(this.index>this.capacity){for(let t=0,s=e.length-this.index;t<s;t++)e[t]=e[t+this.index];e.length-=this.index;this.index=0}}e.length=0;this.index=0;this.flushing=false};this.registerPendingError=e=>{this.pendingErrors.push(e);this.requestErrorThrow()};this.requestFlush=s(this.flush);this.requestErrorThrow=makeRequestCallFromTimer((()=>{if(this.pendingErrors.length)throw this.pendingErrors.shift()}))}}class RawTask{call(){try{this.task&&this.task()}catch(e){this.onError(e)}finally{this.task=null;this.release(this)}}constructor(e,t){this.onError=e;this.release=t;this.task=null}}class TaskFactory{create(e){const t=this.freeTasks;const s=t.length?t.pop():new RawTask(this.onError,(e=>t[t.length]=e));s.task=e;return s}constructor(e){this.onError=e;this.freeTasks=[]}}const r=new AsapQueue;const n=new TaskFactory(r.registerPendingError);
/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */function asap(e){r.enqueueTask(n.create(e))}export{AsapQueue,TaskFactory,asap};

